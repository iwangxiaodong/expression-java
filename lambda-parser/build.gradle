defaultTasks  'clean','build','uploadArchives'

apply plugin: 'java'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'com.jfrog.bintray'

sourceCompatibility = 1.9

version '1.0.8'
group 'com.openle.source.expression'

// 解决中文注释导致的Javadoc generation failed
tasks.withType(Javadoc) {
    options.addStringOption('encoding', 'UTF-8')
    title =title+" (开源项目)"
    excludes = ['**/jinq/**', '**/jooq/**']
    failOnError = false
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs = ['-Xlint:unchecked']   
}


configurations {
    deployerJars
}

dependencies {
    
    deployerJars "org.apache.maven.wagon:wagon-webdav:1.0-beta-2"
        
    compile fileTree(include: ['*.jar'], dir: 'libs')

    //for lambda to sql
    compile group: 'org.jinq', name: 'jinq-jooq', version: '1.8.22'
    compile group: 'org.jooq', name: 'jooq', version: '3.10.1'
    
    //for method ref
    compile "org.mockito:mockito-core:+"

    testCompile("org.junit.jupiter:junit-jupiter-api:5.0.1")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.0.1")
    
    compile group: 'org.ow2.asm', name: 'asm-util', version: '6.0'
    
    // for @javax.persistence.Table and @Embeddable
    compile group: 'javax', name: 'javaee-web-api', version: '8.0'
}

junitPlatform {
    //reportsDir file('build/test-results/test')
}

apply plugin: 'maven'
uploadArchives {
    repositories {
        mavenDeployer {
            pom.artifactId =project.archivesBaseName.toLowerCase()
            configuration = configurations.deployerJars
            
            // Win10似乎重启后环境变量方有效 echo %WEBDAV_PASSWORD%
            ext.pwd = project.hasProperty('WEBDAV_PASSWORD') ? project.property('WEBDAV_PASSWORD') : System.getenv('WEBDAV_PASSWORD')
            println ext.pwd
            repository(url: "dav:http://all.openle.com:58888/repository/") {
                authentication(userName: "webdav", password: ext.pwd)
            }
        }
    }
}

// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives sourcesJar, javadocJar
}

// ./gradlew build bintrayUpload -PBINTRAY_API_KEY=myKey  //or 设定环境变量: export BINTRAY_API_KEY=myKey
// compile 'com.openle.source.expression:lambda-parser:1.0'
bintray {
    user = project.hasProperty('BINTRAY_USER') ? project.property('BINTRAY_USER') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('BINTRAY_API_KEY') ? project.property('BINTRAY_API_KEY') : System.getenv('BINTRAY_API_KEY')
    println key
    configurations = ['archives']
    publish = true
    pkg {
        repo = 'maven'
        name = 'lambda-parser'
        userOrg = user
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/iwangxiaodong/expression-java.git'
        version {
            name = project.version.toString()
            desc = 'Lambda Parser'
        }
    }
}