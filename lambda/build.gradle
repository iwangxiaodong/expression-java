plugins {
    id 'java-library'
    id "com.jfrog.bintray" version "1.8.4"
}

//defaultTasks  'clean','build','uploadArchives'

sourceCompatibility = JavaVersion.VERSION_11

version '1.0.13-b3'
group 'com.openle.module.lambda'
//archivesBaseName="lambda"

test {
    useJUnitPlatform()
}

dependencies {
        
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation('com.openle.module:core:1.0.9')

    //for lambda to sql
    //implementation group: 'org.jinq', name: 'jinq-jooq', version: '1.8.22'
    implementation group: 'org.jooq', name: 'jooq', version: '3.11.7'  //  '3.10.5'
    implementation group: 'org.jinq', name: 'analysis', version: '1.8.25'  //  '1.8.22'

    //for method ref
    implementation "org.mockito:mockito-core:+"
        
    implementation 'net.jodah:typetools:0.5.0'
        
    testCompile("org.junit.jupiter:junit-jupiter-api:5.3.1")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.3.1")
}

task snapshot(dependsOn:assemble) << {
    uploadArchives.execute()
}
gradle.taskGraph.whenReady {taskGraph ->
    if (taskGraph.hasTask(snapshot)) {
        version = version+'-SNAPSHOT'
        println version
    }
}

// 兼容中文注释和排除module-info.java
tasks.withType(Javadoc) {
    options.encoding = "UTF-8"
    title =title+" - Open Source"
    excludes = ['module-info.java','**/jinq/**', '**/jooq/**']
    //failOnError = false
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs = ['-Xlint:unchecked']   
}


compileJava {
    doFirst {
        options.compilerArgs = [
                    '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.java.srcDirs
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

// ./gradlew build bintrayUpload -PBINTRAY_API_KEY=myKey  //or 设定环境变量: export BINTRAY_API_KEY=myKey
bintray {
    user = project.hasProperty('BINTRAY_USER') ? project.property('BINTRAY_USER') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('BINTRAY_API_KEY') ? project.property('BINTRAY_API_KEY') : System.getenv('BINTRAY_API_KEY')
    //println key
    configurations = ['archives']
    publish = true
    pkg {
        repo = 'maven'
        name = 'lambda'
        userOrg = user
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/iwangxiaodong/expression-java.git'
        version {
            //name = project.version.toString()
            desc = 'Lambda'
        }
    }
}