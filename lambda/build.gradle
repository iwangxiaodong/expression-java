buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0-M1' 
    }
}

plugins {
    id 'java-library'
    id "com.jfrog.bintray" version "1.8.0"
}

apply plugin: 'org.junit.platform.gradle.plugin'
junitPlatform {
    //reportsDir file('build/test-results/test')
}

//defaultTasks  'clean','build','uploadArchives'


ext.moduleName = 'com.openle.module.lambda'
// https://guides.gradle.org/building-java-9-modules/
// 不加compileJava配置块儿gradle依然可以编译，仅用于netbeans ide bug。
compileJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        println classpath.asPath
        options.compilerArgs = [
            '--module-path', classpath.asPath,
            //'--patch-module', "moduleName=C:\\Users\\xiaodong\\Documents\\NetBeansProjects\\xxx\\build\\modules\\ModuleName",
        ]
        classpath = files()  // <2>
    }
}

sourceCompatibility = JavaVersion.VERSION_1_9

version '1.0.3'
group 'com.openle.module.lambda'


// 兼容中文注释和排除module-info.java
tasks.withType(Javadoc) {
    options.encoding = "UTF-8"
    title =title+" - Open Source"
    excludes = ['module-info.java','**/jinq/**', '**/jooq/**']
    //failOnError = false
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs = ['-Xlint:unchecked']   
}


configurations {
    deployerJars
}

dependencies {
    
    // v3.0.0版本初测似乎上传不了！
    deployerJars group: 'org.apache.maven.wagon', name: 'wagon-webdav-jackrabbit', version: '2.12'
        
    compile fileTree(include: ['*.jar'], dir: 'libs')

    compile('com.openle.module:core:1.0.0')
    compile group: 'net.bytebuddy', name: 'byte-buddy', version: '1.7.9'

    //for lambda to sql
    //compile group: 'org.jinq', name: 'jinq-jooq', version: '1.8.22'
    compile group: 'org.jooq', name: 'jooq', version: '3.10.2'
    compile group: 'org.jinq', name: 'analysis', version: '1.8.22'

    //for method ref
    compile "org.mockito:mockito-core:+"
    
    compile group: 'org.ow2.asm', name: 'asm-util', version: '6.0'
        
    testCompile("org.junit.jupiter:junit-jupiter-api:5.1.0-M1")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.1.0-M1")  
}



apply plugin: 'maven'
uploadArchives {
    repositories {
        mavenDeployer {
            pom.artifactId =project.archivesBaseName.toLowerCase()
            configuration = configurations.deployerJars

            // Win10重启后环境变量方有效 echo %WEBDAV_PASSWORD%
            ext.pwd = project.hasProperty('WEBDAV_PASSWORD') ? project.property('WEBDAV_PASSWORD') : System.getenv('WEBDAV_PASSWORD')
            println ext.pwd
            repository(url: "dav:http://all.openle.com:58888/repository/") {
                authentication(userName: "webdav", password: ext.pwd)
            }
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.java.srcDirs
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

// ./gradlew build bintrayUpload -PBINTRAY_API_KEY=myKey  //or 设定环境变量: export BINTRAY_API_KEY=myKey
// compile 'com.openle.source.expression:lambda:1.0.1'
bintray {
    user = project.hasProperty('BINTRAY_USER') ? project.property('BINTRAY_USER') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('BINTRAY_API_KEY') ? project.property('BINTRAY_API_KEY') : System.getenv('BINTRAY_API_KEY')
    println key
    configurations = ['archives']
    publish = true
    pkg {
        repo = 'maven'
        name = 'lambda'
        userOrg = user
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/iwangxiaodong/expression-java.git'
        version {
            name = project.version.toString()
            desc = 'Lambda'
        }
    }
}